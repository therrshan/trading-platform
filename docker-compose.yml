version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: trading_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_timescaledb
    environment:
      POSTGRES_DB: trading_timeseries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: trading_password
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - trading_network

  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - trading_network

  celery_worker:
    build: .
    container_name: trading_celery_worker
    command: celery -A trading_platform worker -l info --concurrency=4
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=trading_platform.settings.development
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    restart: unless-stopped

  celery_beat:
    build: .
    container_name: trading_celery_beat
    command: celery -A trading_platform beat -l info
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=trading_platform.settings.development
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    restart: unless-stopped

  django:
    build: .
    container_name: trading_django
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=trading_platform.settings.development
    depends_on:
      - postgres
      - redis
      - timescaledb
    networks:
      - trading_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/var/www/static
    depends_on:
      - django
    networks:
      - trading_network

  coturn:
    image: coturn/coturn:latest
    container_name: trading_coturn
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49152-65535:49152-65535/udp"
    environment:
      - TURN_USERNAME=trading_user
      - TURN_PASSWORD=trading_turn_password
    command: 
      - turnserver
      - --listening-port=3478
      - --realm=trading.local
      - --user=trading_user:trading_turn_password
      - --lt-cred-mech
      - --fingerprint
      - --no-multicast-peers
    networks:
      - trading_network

volumes:
  postgres_data:
  timescale_data:
  redis_data:

networks:
  trading_network:
    driver: bridge